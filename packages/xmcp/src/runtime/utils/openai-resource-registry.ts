import { UserToolHandler } from "./transformers/tool";

/**
 * Represents an auto-generated resource from an OpenAI tool
 */
export interface AutoGeneratedResource {
  name: string;
  uri: string;
  handler: UserToolHandler;
  toolMeta: Record<string, any>;
  htmlContent?: string; // Cached HTML content from the tool handler
}

/**
 * Global registry for auto-generated OpenAI resources
 * This allows tools to automatically create corresponding resources
 * when they have OpenAI metadata
 */
class OpenAIResourceRegistry {
  private resources = new Map<string, AutoGeneratedResource>();

  /**
   * Add a resource to the registry
   */
  add(toolName: string, resource: AutoGeneratedResource): void {
    this.resources.set(toolName, resource);
  }

  /**
   * Get all registered resources
   */
  getAll(): Map<string, AutoGeneratedResource> {
    return this.resources;
  }

  /**
   * Clear all resources (useful for testing or reinitialization)
   */
  clear(): void {
    this.resources.clear();
  }

  /**
   * Check if a resource exists
   */
  has(toolName: string): boolean {
    return this.resources.has(toolName);
  }
}

/**
 * Singleton instance of the registry
 */
export const openAIResourceRegistry = new OpenAIResourceRegistry();
